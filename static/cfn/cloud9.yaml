Description: Provides a Cloud9 instance, resizes the instance volume size, and installs required components.

Parameters:
  EnvironmentName:
    Type: String
    Description: An environment name that is tagged to the resources.
    Default: Workshop
  InstanceName:
    Type: String
    Description: Cloud9 instance name.
    Default: Workshop
  InstanceType:
    Type: String
    Description: The memory and CPU of the EC2 instance that will be created for Cloud9 to run on.
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t2.medium
      - m5.large
    ConstraintDescription: Must be a valid Cloud9 instance type
  InstanceVolumeSize:
    Type: Number
    Description: The size in GB of the Cloud9 instance volume
    Default: 50
  InstanceOwner:
    Type: String
    Description: Assumed role username of Cloud9 owner, in the format 'Role/username'. Leave blank to assign leave the instance assigned to the role running the CloudFormation template.
    Default: ""
  InstanceImageId:
    Type: String
    Description: The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance.
    Default: ubuntu-22.04-x86_64
    AllowedValues:
      - ubuntu-18.04-x86_64
      - ubuntu-22.04-x86_64
    ConstraintDescription: Must be a valid AMI type    
  AutomaticStopTimeMinutes:
    Type: Number
    Description: How long Cloud9 can be inactive (no user input) before auto-hibernating. This helps prevent unnecessary charges.
    Default: 240
  CodeCommitRepoName:
    Type: String
    Description: The name of the CodeCommit repository to clone into the Cloud9 instance.
    Default: ""
  WorkshopURL:
    Type: String
    Description: The workshop download URL.
    Default: ""
  IotDataURL:
    Type: String
    Description: The IoT CSV file download URL.
    Default: ""
  ManifestURL:
    Type: String
    Description: The manifest JSON file download URL.
    Default: ""
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General configuration
        Parameters:
          - EnvironmentName
      - Label:
          default: Cloud9 configuration
        Parameters:
          - InstanceName
          - InstanceType
          - InstanceVolumeSize
          - InstanceOwner
          - AutomaticStopTimeMinutes
          - CodeCommitRepoName
          - WorkshopURL
          - IotDataURL
          - ManifestURL
    ParameterLabels:
      EnvironmentName:
        default: Environment name
      InstanceName:
        default: Name
      InstanceType:
        default: Instance type
      InstanceVolumeSize:
        default: Attached volume size
      InstanceOwner:
        default: Role and username
      InstanceImageId:
        default: Instance AMI
      AutomaticStopTimeMinutes:
        default: Timeout
      CodeCommitRepoName:
        default: Code Commit Repository Name
Conditions: 
  AssignCloud9Owner: !Not [!Equals [!Ref InstanceOwner, ""]]
  CloneRepository: !Not [!Equals [!Ref CodeCommitRepoName, ""]]
Resources:
  ################## PERMISSIONS AND ROLES #################
  Cloud9Role:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: CodeWhisperer requires '*' as a resource, reference https://docs.aws.amazon.com/codewhisperer/latest/userguide/cloud9-setup.html#codewhisperer-IAM-policies
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
                - codecommit.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      Path: '/'
      Policies:
        - PolicyName: !Sub CDKAssumeRolePolicy-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::*:role/cdk-*
        - PolicyName: !Sub Codewhisperer-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codewhisperer:GenerateRecommendations
                Resource:
                  - "*"
  Cloud9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Describe Action doesn't support any resource condition
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub Cloud9LambdaPolicy-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:ListCommandInvocations
                  - ssm:GetCommandInvocation
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:RebootInstances
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeIamInstanceProfileAssociations
                Resource: '*'
              - Effect: Allow
                Action:
                  - quicksight:*
                  - ds:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${Cloud9LogBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${Cloud9LogBucket}/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::GetAtt:
                    - Cloud9Role
                    - Arn

  ################## LAMBDA BOOTSTRAP FUNCTION ################
  Cloud9AssociateInstanceProfileLambda:
    Type: Custom::Cloud9AssociateInstanceProfileLambda
    DependsOn:
      - Cloud9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      ServiceToken:
        Fn::GetAtt:
          - Cloud9AssociateInstanceProfileLambdaFunction
          - Arn
      Region:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9Instance
      LabIdeInstanceProfileName:
        Ref: Cloud9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
          - Cloud9InstanceProfile
          - Arn
      LogBucket:
        Ref: Cloud9LogBucket
  
  Cloud9AssociateInstanceProfileLambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Cloud9LambdaExecutionRole has the AWSLambdaBasicExecutionRole managed policy attached, allowing writing to CloudWatch logs
          - id: W89
            reason: Bootstrap function does not need the scaffolding of a VPC or provisioned concurrency
          - id: W92
            reason: Bootstrap function does not need provisioned concurrency   
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - Cloud9LambdaExecutionRole
          - Arn
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 400
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          def restart_instance(instance_id):
              logger.info('Restart EC2 instance to restart SSM Agent')
              ec2 = boto3.client('ec2')

              try:
                  response = ec2.reboot_instances(
                      InstanceIds=[
                          instance_id
                      ]
                  )
              except botocore.exceptions.ClientError as error:
                  raise error

              logger.info('response: %s', response)

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              logger.info("context: {}".format(context))
              responseData = {}

              if event["RequestType"] == "Create":
                  try:
                      # Open AWS clients
                      ec2 = boto3.client("ec2")

                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(
                          Filters=[
                              {
                                  "Name": "tag:aws:cloud9:environment",
                                  "Values": [event["ResourceProperties"]["EnvironmentId"]],
                              }
                          ]
                      )["Reservations"][0]["Instances"][0]
                      logger.info("instance: {}".format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          "Arn": event["ResourceProperties"]["LabIdeInstanceProfileArn"],
                          "Name": event["ResourceProperties"]["LabIdeInstanceProfileName"],
                      }
                      logger.info("iam_instance_profile: {}".format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance["State"]["Name"]
                      logger.info("instance_state: {}".format(instance_state))
                      while instance_state != "running":
                          time.sleep(5)
                          instance_state = ec2.describe_instances(
                              InstanceIds=[instance["InstanceId"]]
                          )
                          logger.info("instance_state: {}".format(instance_state))

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(
                          IamInstanceProfile=iam_instance_profile,
                          InstanceId=instance["InstanceId"],
                      )
                      logger.info(
                          "response - associate_iam_instance_profile: {}".format(response)
                      )

                      # Restart the instance
                      restart_instance(instance['InstanceId'])

                      responseData = {
                          "Success": "Started bootstrapping for instance: "
                          + instance["InstanceId"]
                      }

                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          responseData,
                          "CustomResourcePhysicalID",
                      )

                  except Exception as e:
                      logger.error(e, exc_info=True)
                      # responseData = {'Error': traceback.format_exc(e)}
                      responseData = {
                          "Error": "There was a problem associating IAM profile to the Cloud9 Instance"
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.FAILED,
                          responseData,
                          "CustomResourcePhysicalID",
                      )
              elif event["RequestType"] == "Update":
                  responseData["Message"] = {"Success": "Update event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourcePhysicalID",
                  )
              elif event["RequestType"] == "Delete":
                  try:
                      # Need to empty the S3 bucket before it is deleted
                      AssetsBucketName = (event["ResourceProperties"]["LogBucket"])
                      s3 = boto3.resource("s3")
                      bucket = s3.Bucket(AssetsBucketName)
                      bucket.objects.all().delete()
                      responseData = {
                          "Success": "S3 Log bucket emptied for S3 Log Bucket: " + AssetsBucketName
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          responseData,
                          "CustomResourcePhysicalID",
                      )
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      # responseData = {'Error': traceback.format_exc(e)}
                      responseData = {"Error": "There was a problem emptying the S3 bucket"}
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.FAILED,
                          responseData,
                          "CustomResourcePhysicalID",
                      )
              else:
                  responseData = {"Success": "Other event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourcePhysicalID",
                  )
  
  LambdaLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: KMS Key not required for encrypting this non sensitive data  
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Cloud9AssociateInstanceProfileLambdaFunction}
      RetentionInDays: 7

  ################## SSM BOOTSTRAP HANDLER ###############
  Cloud9LogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs aren't needed for this bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  Cloud9LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Cloud9LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Cloud9LogBucket}
              - !Sub arn:${AWS::Partition}:s3:::${Cloud9LogBucket}/*
            Principal:
              AWS:
                Fn::GetAtt:
                  - Cloud9LambdaExecutionRole
                  - Arn

  Cloud9BootStrapSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: Cloud9bootstrap
            inputs:
              runCommand:
                - '#!/bin/bash'
                - !Sub export AWS_REGION=${AWS::Region}
                - !Sub export AWS_ACCOUNTID=${AWS::AccountId}
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - . /home/ubuntu/.bashrc
                - sudo apt-get update
                - sudo apt-get -y install sqlite telnet jq strace tree gcc python3 python3-pip gettext bash-completion at
                - echo '=== INSTALL and CONFIGURE default software components ==='
                - sudo -H -u ubuntu bash -c "pip install --user -U boto boto3 botocore awscli aws-sam-cli"
                - !Sub WORKSHOPURL=${WorkshopURL}
                - !Sub IOTDATAURL=${IotDataURL}
                - !Sub MANIFESTURL=${ManifestURL}
                - !Sub SIZE=${InstanceVolumeSize}
                - !Sub REGION=${AWS::Region}
                - echo WORKSHOPZIP - $WORKSHOPURL
                - cd /home/ubuntu/environment
                - curl $WORKSHOPURL --output workshop.zip
                - sudo -u ubuntu unzip workshop.zip -d workshop && rm workshop.zip
                - sudo -u ubuntu unzip workshop/data/disappearing_workforce/sample_pdfs.zip -d workshop/data/disappearing_workforce/ && rm workshop/data/disappearing_workforce/sample_pdfs.zip && rm -rf workshop/data/disappearing_workforce/__MACOSX
                - WFBUCKETNAME=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'storage-disappearingworkforce-')].Name" --region $REGION | jq -r .[0])
                - aws s3 sync ./workshop/data/disappearing_workforce/sample_pdfs "s3://$WFBUCKETNAME/sample_pdfs" --delete --exclude "*" --include "*.pdf"
                - echo IoTDataURL - $IOTDATAURL
                - curl $IOTDATAURL --output iotdata.csv
                - IOT_BUCKETNAME=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'storage-bucketiot-')].Name" --region $REGION | jq -r .[0])
                - echo IOT_BUCKETNAME - $IOT_BUCKETNAME
                - !Sub export IOT_BUCKETNAME=$IOT_BUCKETNAME
                - aws s3api put-object --bucket $IOT_BUCKETNAME --key iotdata.csv --body ./iotdata.csv
                - echo ManifestURL - $MANIFESTURL
                - curl $MANIFESTURL --output manifest.json
                - sed -i "s/BUCKETNAME/$IOT_BUCKETNAME/g" ./manifest.json
                - echo 'Write streamlit config'
                - |
                  mkdir -p /home/ubuntu/.streamlit
                  cat >/home/ubuntu/.streamlit/config.toml <<EOL
                  [server]
                  enableXsrfProtection = false
                  enableCORS = false
                  EOL
                - echo '=== Resizing the Instance volume'
                - |
                  INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                  VOLUMEID=$(aws ec2 describe-instances \
                    --instance-id $INSTANCEID \
                    --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
                    --output text --region $REGION)
                  aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE --region $REGION
                  while [ \
                    "$(aws ec2 describe-volumes-modifications \
                      --volume-id $VOLUMEID \
                      --filters Name=modification-state,Values="optimizing","completed" \
                      --query "length(VolumesModifications)"\
                      --output text --region $REGION)" != "1" ]; do
                  sleep 1
                  done
                  if [[ -e "/dev/xvda" && $(readlink -f /dev/xvda) = "/dev/xvda" ]]
                  then
                    sudo growpart /dev/xvda 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/xvda1
                    fi
                  else
                    sudo growpart /dev/nvme0n1 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/nvme0n1p1
                    fi
                  fi
                - echo PIPINSTALL
                - pip3 install pip==24.0 && pip3 install -r /home/ubuntu/environment/workshop/setup/requirements.txt -U
                - echo '=== Disable temporary managed credentials ==='
                - echo "aws cloud9 update-environment --environment-id $C9_PID --managed-credentials-action DISABLE --region $AWS_REGION &> /dev/null" | tee -a /home/ubuntu/.bash_profile
                - echo 'rm -vf ${HOME}/.aws/credentials  &> /dev/null' | tee -a /home/ubuntu/.bash_profile
                - echo '=== CONFIGURE awscli and setting ENVIRONMENT VARS ==='
                - echo "complete -C '/usr/local/bin/aws_completer' aws" >> /home/ubuntu/.bashrc
                - mkdir -p /home/ubuntu/.aws
                - echo '[default]' > /home/ubuntu/.aws/config
                - echo 'output = json' >> /home/ubuntu/.aws/config
                - echo "region = $AWS_REGION" >> /home/ubuntu/.aws/config
                - chmod 600 /home/ubuntu/.aws/config
                - echo 'PATH=$PATH:/usr/local/bin' >> /home/ubuntu/.bashrc
                - echo 'export PATH' >> /home/ubuntu/.bashrc
                - !Sub echo 'export AWS_REGION=${AWS::Region}' >> /home/ubuntu/.bashrc
                - !Sub echo 'export AWS_ACCOUNTID=${AWS::AccountId}' >> /home/ubuntu/.bashrc
                - !Sub echo "export IOT_BUCKETNAME=$IOT_BUCKETNAME" >> /home/ubuntu/.bashrc
                - echo 'export NEXT_TELEMETRY_DISABLED=1' >> /home/ubuntu/.bashrc
                - source /home/ubuntu/.bashrc
                - chmod +x /home/ubuntu/environment/workshop/setupQS.bash
                - echo '=== CLEANING /home/ubuntu ==='
                - for f in cloud9; do rm -rf /home/ubuntu/$f; done
                - chown -R ubuntu:ubuntu /home/ubuntu/
                - echo '=== PREPARE REBOOT in 1 minute with at ==='
                - FILE=$(mktemp) && echo $FILE && echo '#!/bin/bash' > $FILE && echo 'reboot -f --verbose' >> $FILE && at now + 1 minute -f $FILE
                - echo "Bootstrap completed with return code $?"
  
  Cloud9BootstrapAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref Cloud9BootStrapSSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref Cloud9LogBucket
          OutputS3KeyPrefix: bootstrap
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - Active

  ################## INSTANCE #####################
  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: Cloud9Role

  Cloud9Instance:
    DependsOn: Cloud9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: !Sub AWS Cloud9 instance for ${EnvironmentName}
      Repositories:
        Fn::If:
          - CloneRepository 
          - - RepositoryUrl: !Sub https://git-codecommit.${AWS::Region}.${AWS::URLSuffix}/v1/repos/${CodeCommitRepoName}
              PathComponent: !Ref CodeCommitRepoName
          - Ref: AWS::NoValue
      AutomaticStopTimeMinutes: !Ref AutomaticStopTimeMinutes
      InstanceType: !Ref InstanceType
      Name: !Ref InstanceName
      ImageId: !Ref InstanceImageId
      OwnerArn: 
        Fn::If:
          - AssignCloud9Owner
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:assumed-role/${InstanceOwner}
          - Ref: AWS::NoValue
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: SSMInstallFiles
          Value: Active
        - Key: Environment
          Value: !Ref EnvironmentName

  ################## LAMBDA SSM STATUS FUNCTION ################
  Cloud9BootstrapInstanceLambda:
    Type: Custom::Cloud9BootstrapInstanceLambda
    DependsOn:
      - Cloud9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
        - Key: auto-delete
          Value: never
      ServiceToken:
        Fn::GetAtt:
          - Cloud9BootstrapLambdaFunction
          - Arn
      Region:
        Ref: AWS::Region
      AwsAccountId:
        Ref: AWS::AccountId
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9Instance
      SSMDocumentName:
        Ref: Cloud9BootStrapSSMDocument

  Cloud9BootstrapLambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Cloud9LambdaExecutionRole has the AWSLambdaBasicExecutionRole managed policy attached, allowing writing to CloudWatch logs
          - id: W89
            reason: Bootstrap function does not need the scaffolding of a VPC or provisioned concurrency
          - id: W92
            reason: Bootstrap function does not need provisioned concurrency   
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - Cloud9LambdaExecutionRole
          - Arn
      Runtime: python3.9
      MemorySize: 512
      Timeout: 900
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          import random
          import string 

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          ec2 = boto3.client("ec2")
          ssm = boto3.client('ssm')
          quicksight = boto3.client('quicksight')

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              logger.info("context: {}".format(context))
              responseData = {}

              if event["RequestType"] == "Create":
                  try:
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(
                          Filters=[
                              {
                                  "Name": "tag:aws:cloud9:environment",
                                  "Values": [event["ResourceProperties"]["EnvironmentId"]],
                              }
                          ]
                      )["Reservations"][0]["Instances"][0]
                      logger.info("instance: {}".format(instance))

                      # List command invocations for instance and document
                      document_name = event["ResourceProperties"]["SSMDocumentName"]
                      response = ssm.list_command_invocations(
                          InstanceId=instance['InstanceId'],
                          Filters=[ { "key": "DocumentName", "value": document_name } ]
                      )["CommandInvocations"]

                      logger.info("Waiting for Cloud9 bootstrap process to start. Can take around 20 minutes, polling every 30 seconds")
                      while len(response) < 1:
                          time.sleep(30)
                          response = ssm.list_command_invocations(
                              InstanceId=instance['InstanceId'],
                              Filters=[ { "key": "DocumentName", "value": document_name } ]
                          )["CommandInvocations"]
                          logger.info("Waiting for Cloud9 bootstrap process to start. Can take around 20 minutes, polling every 30 seconds")
                      
                      command_id = response[0]["CommandId"]
                      ssm_waiter = ssm.get_waiter('command_executed')
                      ssm_waiter.wait(
                          CommandId=command_id,
                          InstanceId=instance['InstanceId'],
                          WaiterConfig={
                              'Delay': 30,
                              'MaxAttempts': 60
                          }
                      )

                      responseData = {
                          "Success": "Started bootstrapping for instance: "
                          + instance["InstanceId"]
                      }

                      # Get the InstanceId of the Cloud9 IDE
                      accountName=''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(10))
                      qsAccountId = event["ResourceProperties"]["AwsAccountId"]
                      
                      qsResponse = quicksight.create_account_subscription(
                          Edition = 'ENTERPRISE_AND_Q',
                          AuthenticationMethod = 'IAM_AND_QUICKSIGHT',
                          AwsAccountId = qsAccountId,
                          AccountName = accountName,
                          NotificationEmail = accountName +'@me.com',
                          EmailAddress = accountName +'@me.com')

                      logger.info("quicksight.create_account_subscription: {}".format(qsResponse))
                      
                      time.sleep(30)

                      qsResponse = quicksight.describe_account_subscription(AwsAccountId = qsAccountId)
                      logger.info("quicksight.describe_account_subscription: {}".format(qsResponse))
                      counter = 0

                      while qsResponse["AccountInfo"]["AccountSubscriptionStatus"] != "ACCOUNT_CREATED" and counter < 10 :
                          time.sleep(20)
                          qsResponse = quicksight.describe_account_subscription(AwsAccountId = qsAccountId)
                          logger.info("quicksight.describe_account_subscription: {}".format(qsResponse))
                          counter+=1

                      qsResponse = quicksight.register_user(
                        IdentityType='IAM',
                        Email=accountName +'@me.com',
                        UserRole='ADMIN_PRO',
                        IamArn="arn:aws:iam::{}:role/WSParticipantRole".format(qsAccountId),
                        SessionName='Participant',
                        AwsAccountId=qsAccountId,
                        Namespace='default')
                      
                      logger.info("quicksight.register_user: {}".format(qsResponse))

                      qsResponse = quicksight.list_users(AwsAccountId=qsAccountId, Namespace='default')
                      logger.info("quicksight.list_users: {}".format(qsResponse))

                      # currentUser = qsResponse["UserList"][0]["UserName"]
                      # logger.info("quicksight.currentUser: {}".format(currentUser))
                      
                      # qsResponse = quicksight.delete_user(
                      #   UserName=currentUser,
                      #   AwsAccountId=qsAccountId,
                      #   Namespace='default')
                        
                      # logger.info("quicksight.delete_user: {}".format(qsResponse))

                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {
                          "Error": "There was a problem associating IAM profile to the Cloud9 Instance"
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.FAILED,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
              elif event["RequestType"] == "Update":
                  responseData["Message"] = {"Success": "Update event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourceBootstrapID",
                  )
              elif event["RequestType"] == "Delete":
                  responseData = {
                      "Success": "Nothing to delete"
                  }
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourceBootstrapID",
                  )
              else:
                  responseData = {"Success": "Other event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourceBootstrapID",
                  )

  BootstrapLambdaLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: KMS Key not required for encrypting this non sensitive data  
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Cloud9BootstrapLambdaFunction}
      RetentionInDays: 7

################## OUTPUTS #####################
Outputs:
  Cloud9IdeUrl:
    Description: URL to launch the Cloud9 IDE
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9Instance}?region=${AWS::Region}
